<task>
	<overview>
		Your task is to generate structured modification instructions for a financial report configuration in JSON format based on the user's instructions. The user may provide an existing JSON configuration and describe the desired changes. Your goal is to produce a **single JSON array** of modification instructions that can be applied to the existing JSON configuration to produce the desired result. The modifications should be communicated in a structured, machine-readable format that strictly adheres to the required structure while accurately incorporating the user's requests.
	</overview>
	<jsonStructure>
		Here is the description of the full config JSON file. This should help you understand the json structure and identity where you can make your modifications
		<reportTitle>The title of the report</reportTitle>
		<numberFormat>
			Sets how numbers are formatted by default, see here an example
			<code>
				"numberFormat":
				{
					"currency": "USD",
					"scale": "unchanged",
					"decimals": 0
				}
			</code>
		</numberFormat>
		<POV>
			<description>
				The POV (Point of View) configuration contains a collection of dimensions that define the default values and visibility settings for each dimension in the report.
				It allows for specifying whether the selector for each dimension should be visible to the user and what the default value should be.
			</description>
			<item>
				<name>The technical name of the dimension as defined in the source system</name>
				<alias>The name that should be displayed in the fronend application</alias>
				<order>Defines the order the dimension of the dimensions in the POV bar of the frontend application</order>
				<default>Specifies the default value for the dimension. This value will be used when the report is initially loaded unless a user changes it through the POV selector.</default>
				<top>Optional parameter that specifies the top of a hierarchical dimension</top>
				<visible>
					A boolean value (true or false) that determines whether the selector for this dimension is shown in the POV interface.
					If set to false, the selector will be hidden, but the default value will still be applied.
				</visible>
			</item>
			<examplePOV>
				An example of a POV configuration:
				<code>
					"POV": [
					{
					"name": "Entity",
					"alias": "Entity",
					"order": 0,
					"default": "Total GolfStream",
					"top": "Total GolfStream",
					"visible": true
					},
					{
					"name": "Category",
					"alias": "Category",
					"order": 3,
					"default": "Actuals",
					"visible": true
					},
					{
					"name": "Year",
					"alias": "Year",
					"order": 1,
					"default": 2023,
					"visible": true
					},
					{
					"name": "Period",
					"alias": "Period",
					"order": 2,
					"default": "p12 - december",
					"visible": true
					},
					{
					"name": "View",
					"alias": "View",
					"order": 2,
					"default": "Periodic",
					"visible": true
					},
					{
					"name": "Account",
					"alias": "Account",
					"order": 6,
					"default": "Income",
					"visible": false
					}
					],
				</code>
			</examplePOV>
		</POV>
		<layout>
			<gridColumns>
				<description>
					Starts with the gridColumns property, which typically looks like:
				</description>
				<example>
					<code>
						"gridColumns": {
						"sm": 1,
						"md": 1,
						"lg": 8
						}
					</code>
				</example>
				<details>
					This property defines how many columns the screen should be split into for small (sm), medium (md), and large (lg) screens.
				</details>
			</gridColumns>
			<rows>
				<description>
					Layout is structured as a collection of rows. Each row contains one or more columns.
				</description>
				<columns>
					<colSpan>
						Defines how many columns the column should stretch. It can be set specifically for different screen sizes, e.g.:
						<code>
							"colSpan": {
							"sm": 1,
							"md": 1,
							"lg": 3
							}
						</code>
						For full-width objects, use:
						<code>
							"colSpan": {
							"sm": "full",
							"md": "full",
							"lg": "full"
							}
						</code>
					</colSpan>
					<components>
						Each column should contain only one component. Each component must have:
						<id>
							Unique Identifier, must be always unique. Use C1, C2, etc., for normal components and S1, Co1 for scale selectors and comments components.
						</id>
						<type>
							Defines the type of the component. Current supported types are:
							<ReportTable>Tabular representation of financial data.</ReportTable>
							<Chart>A chart object, can be different types.</Chart>
							<Tile>Used to visualize a single KPI including a micro-chart.</Tile>
							<GrowthTile>Used to visualize a single KPI including a micro-chart showing both historical and future data.</GrowthTile>
							<NestedRow>
								Special type allowing another collection of rows with the same layout structure. This is used to create nested structures like one row with a main table and two vertically aligned charts on the side.
							</NestedRow>
							<ScaleSelectors>This component should always be used and displays the currency, scale selector (unchanged, thousands, millions), and a decimal selector.</ScaleSelectors>
							<Comments>An object with the ability to show and edit comments that are saved with the report.</Comments>
						</type>
						<title>
							The title of the component, typically used as a label. Dynamic placeholders for dimensions are allowed. For example:
							<code>"title": "Variance analysis for [Account]"</code>
						</title>
						<noborder>Boolean value (true or false) indicating whether the object should have a visual placeholder with border and padding.</noborder>
						<maxheight>Defines the maximum pixel height of the placeholder. If empty, the object can grow indefinitely.</maxheight>
						<minheight>Defines the minimum pixel height of the placeholder. If empty the obejct will take the minimum amount of height needed.</minheight>
						<numberFormat>
							The number format of a component overrides the report number format for one specific component. Example:
							<code>
								"numberFormat": {
								"scale": "millions",
								"decimals": 1
								}
							</code>
						</numberFormat>
						<config>
							Component-specific configuration settings.
							<lists>
								In this configuration, lists used by components are defined within the `config.lists` array as objects. Each list object must contain:
								<listReference>
									The reference name used within the component to refer to the list (e.g., "rowsList", "columnsList", "trendList").
								</listReference>
								<list>
									The name of the actual list defined elsewhere in the configuration that this component should use.
								</list>
							</lists>
							<KPI>
								<description>
									Defines the KPI by specifying dimension members.
									This dictates which data the component retrieves and overrides the selected POV.
									This setting is valid for all numeric data retrieving components like tables, charts, tiles, etc.
								</description>
								<exampleConfiguration>
									<code>
										"KPI": {
										"Account": "Income",
										"Entity": "HQ"
										}
									</code>
								</exampleConfiguration>
							</KPI>
							<componentConfigurations>
								<Comments>
									<description>
										The Comments component provides the ability to display, edit, and save comments associated with a specific report and its dimensional context.
										It supports linking comments to a report, configuring dimensional settings, custom titles, child comment roll-ups, and integration with AI-generated narratives.
									</description>
									<config>
										<title>
											<description>
												Optional. Specifies a custom title for the comments section.
												If not provided, defaults to "POV Comments".
												This title can be dynamically generated using placeholders for dimensions.
											</description>
											<example>"title": "Comments for [Entity] - [Year]"</example>
										</title>
										<linkToReport>
											<description>
												A boolean value indicating whether the comments are linked to a specific report.
												If true, the comments will be saved and retrieved based on the configured `reportId` (or current reportId if not specified) and `dimensions`.
												If false, the comments will only be saved and retrieved using the dimension values. This would allow to use some global non report related comments.
											</description>
										</linkToReport>
										<reportId>
											<description>
												The unique identifier of the report the comments are linked to. Can be empty if comments should be tied to the current report.
												If this field is specified it allows to specify another report where the comments should come from.
												With this setting it is allowed to share comments between reports.
											</description>
											<example>"reportId": "Report123"</example>
										</reportId>
										<dimensions>
											<description>
												Specifies the dimensional context for the comments. This is a dictionary of dimension names and their values.
												If a value is empty, it will be filled in automatically using the `selectedPOV` from the frontend.
												The comments retrieved or saved will be filtered by these dimension values.
											</description>
											<example>
												"dimensions": {
												"Year": "",
												"Period": "Q1",
												"Entity": "Total HQ"
												}
											</example>
										</dimensions>
										<rollupDimension>
											<description>
												Optional. Defines the dimension for rolling up comments from child entities.
												If provided, the component will show a tab with "Descendant Comments" that aggregates comments from members below the specified dimension value.
												For example, if `rollupDimension` is "Entity", and the current `Entity` POV is "Total HQ", child comments for all sub-entities under "Total HQ" can be viewed.
											</description>
											<example>"rollupDimension": "Entity"</example>
										</rollupDimension>
										<enableAINarrativesForTable>
											<description>
												Optional. When set, this links the Comments component to a specific ReportTable by referencing the table's `id`.
												By providing a table `id` here, any AI-generated narratives (e.g., anomaly detection explanations) will be routed specifically to this Comments component.
												If not set, AI-generated comments will not automatically integrate with this comments field.
											</description>
											<example>"enableAINarrativesForTable": "C1"</example>
										</enableAINarrativesForTable>
										<exampleConfiguration>
											This example shows a comments field that is linked to a table with ID C2. This comments field will support AI comments generation and will not support child comments rollup
											The comments will be stored using the current report id and the current POV values of Year, Period and Entity
											<code>
												{
												"id": "Co1",
												"type": "Comments",
												"config": {
												"linkToReport": true,
												"reportId": "",
												"dimensions": {
												"Year": "",
												"Period": "",
												"Entity": ""
												},
												"rollupDimension": "",
												"enableAINarrativesForTable": "C2"
												}
												}
											</code>
										</exampleConfiguration>
									</config>
								</Comments>
								<Chart>
									<description>
										The Chart component displays various chart types (Column, Bar, Line, Waterfall, Label).
										It requires two lists:
										- categoryList: defines categories (e.g., periods)
										- seriesList: defines metrics (e.g., Actuals, Budget)
										Orientation (Vertical/Horizontal) applies only to Waterfall charts.
										For other charts, "Column" implies vertical and "Bar" implies horizontal.
										Legend names are derived from the seriesList.
									</description>
									<exampleConfigurationWaterfall>
										<code>
											{
											"id": "C2",
											"type": "Chart",
											"title": "EVA vs Forecast",
											"maxheight": 400,
											"config": {
											"orientation": "Horizontal",
											"KPI": {
											"Account": "EBITDA"
											},
											"lists": [
											{
											"listReference": "seriesList",
											"list": "WaterfallElements"
											},
											{
											"listReference": "categoryList",
											"list": "WaterfallComparison"
											}
											],
											"axis": {
											"categoryAxis": {
											"display": true,
											"labelRotation": 0,
											"labelSkipping": 0
											},
											"numericAxes": [
											{
											"display": false
											}
											]
											},
											"series": [
											{
											"dataKey": "WaterfallSeries",
											"listReference": "elements",
											"type": "Waterfall",
											"axisProperties": {
											"format": "{value}",
											"label": "EBITDA Value"
											},
											"dataLabels": {
											"display": true,
											"format": "{value}",
											"position": "inside"
											}
											}
											],
											"legend": {
											"display": false
											}
											}
											}
										</code>
									</exampleConfigurationWaterfall>
									<attributes>
										<lists>
											<description>
												Must define:
												- categoryList: categories (e.g., periods)
												- seriesList: metrics
											</description>
										</lists>
										<chartType>
											<description>
												Supported: "Column", "Bar", "Line", "Label", "Waterfall".
												"Waterfall" uses orientation to determine layout.
											</description>
										</chartType>
										<orientation>
											<description>
												For Waterfall only:
												- "Horizontal": categories on y-axis
												- "Vertical": categories on x-axis
												For Column/Bar, orientation is implied by type.
											</description>
										</orientation>
										<axis>
											<description>
												Configures category and numeric axes.
											</description>
											<categoryAxis>
												<display>
													<description>Boolean. Hide/show category axis.</description>
												</display>
												<labelRotation>
													<description>Integer rotation angle in degrees.</description>
												</labelRotation>
												<labelSkipping>
													<description>Integer skipping factor (0=none,1=every 2nd,...).</description>
												</labelSkipping>
											</categoryAxis>
											<numericAxes>
												<description>
													Array of numeric axis definitions. Each can be shown/hidden.
												</description>
												<display>
													<description>Boolean. Hide/show numeric axis.</description>
												</display>
											</numericAxes>
										</axis>
										<series>
											<description>
												Array of series definitions:
												- dataKey: metric from seriesList
												- type: "Column", "Bar", "Line", "Label", or "Waterfall".
												If a metric is a variance formula, the chart colors bars green/red automatically (no special type needed).
												- axisProperties: format, label, and gridLines for numeric axis.
												- dataLabels: display, format, position.
											</description>
											<dataKey>
												<description>String referencing a seriesList item.</description>
											</dataKey>
											<type>
												<description>
													"Column" (vertical), "Bar" (horizontal), "Label" (text only),
													"Waterfall" (cumulative steps).
												</description>
											</type>
											<axisProperties>
												<description>
													- format: e.g., "{value} AED"
													- label: e.g., "Value (AED)"
													- gridLines: boolean
												</description>
											</axisProperties>
											<dataLabels>
												<description>
													- display: boolean
													- format: e.g., "{value} AED"
													- position: "top"/"inside"
												</description>
											</dataLabels>
										</series>
										<legend>
											<description>
												- display: boolean. If true, shows legend using friendlyNames.
											</description>
											<display>
												<description>Boolean. Hide/show legend.</description>
											</display>
										</legend>
									</attributes>
								</Chart>
								<Tile>
									<exampleConfiguration>
										<code>
											"config": {
											"KPI": {
											"Account": "Income"
											},
											"lists": [
											{
											"listReference": "trendList",
											"list": "periods"
											},
											{
											"listReference": "comparisonList",
											"list": "actualBudget"
											}
											]
											}
										</code>
									</exampleConfiguration>
									<attributes>
										<lists>
											The `lists` array must include:
											<listReference>
												<trendList>
													A list defined in the configuration that typically shows a number of periods to display a trend. This list is used for the micro-chart.
												</trendList>
												<comparisonList>
													A list used to make a variance calculation. Examples are Actual and Budget or This Year and Previous Year.
												</comparisonList>
											</listReference>
										</lists>
									</attributes>
								</Tile>
								<GrowthTile>
									<description>
										The GrowthTile is similar to the Tile component but shows, next to a historical trend, an algorithmic forecast as a dotted line alongside any future Category like Budget.
									</description>
									<exampleConfiguration>
										<code>
											"config": {
											"KPI": {
											"Account": "Portfolio ARR",
											"Investment": "Portco1"
											},
											"recalculateFromCumulative": true,
											"years": [2022, 2023],
											"futureCategory": {
											"Year": 2024,
											"Category": "Budget"
											},
											"lists": [
											{
											"listReference": "trendList",
											"list": "trendList"
											}
											]
											}
										</code>
									</exampleConfiguration>
									<attributes>
										<lists>
											The `lists` array must include:
											<listReference>
												<trendList>
													A list defined in the configuration that typically shows a number of periods to display a trend. This list is used for the micro-chart.
												</trendList>
											</listReference>
										</lists>
										<recalculateFromCumulative>
											This value should be true for any cumulative KPIs like ARR, employee count, customer count, etc.
										</recalculateFromCumulative>
										<years>
											The historical years. This chart needs at least two years of history to detect seasonal trends.
										</years>
										<futureCategory>
											In addition to an algorithmic forecasted Category, it can also display a future Year Category from the database like Budget.
										</futureCategory>
									</attributes>
								</GrowthTile>
								<ReportTable>
									<exampleConfiguration>
										<code>
											"config": {
											"firstColumnWidth": 150,
											"lists": [
											{
											"listReference": "rowsList",
											"list": "rowDefinitions"
											},
											{
											"listReference": "columnsList",
											"list": "columnDefinitions"
											}
											]
											}
										</code>
									</exampleConfiguration>
									<attributes>
										<lists>
											The `lists` array must include:
											<listReference>
												<rowsList>
													A list defining the rows of a table
												</rowsList>
												<columnsList>
													A list defining the columns of a table
												</columnsList>
											</listReference>
										</lists>
										<firstColumnWidth>
											Sets the width in pixels of the header column.
										</firstColumnWidth>
										<mergeColumnHeaders>When this value is set to true, the UI will combine similarly named column headers into a single cell. This is particularly useful when using multiple dimensions in the columns. For example, to create a block for each Year repeating multiple columns like Actuals, Budget, and Variance. In this scenario, the Year would show as a merged cell. The order of the dimensions in a list defines the order of merging; in this example, it's required to have Year first and then Category.</mergeColumnHeaders>
										<selectRow>When this value is set to false, the table rows will be no longer selectable</selectRow>

									</attributes>
								</ReportTable>
							</componentConfigurations>
						</config>
					</components>
				</columns>
			</rows>
		</layout>
		<lists>
			<description>
				Lists can have zero to many (0 to n) under the lists group. They are used in components (layout section) and might not always be used.
			</description>
			<structureOfLists>
				<dimensions>
					The first child element of each list must be a dimensions array, which should contain at least one dimension but can include more.
				</dimensions>
				<type>Lists can have the "type": "dynamic" attribute this means that they will be dynamically generated based their attributes and not on their items</type>
				<dynamicLists>
					<dynamicconfig>
						<commonAttributes>
							<minWidth>
								<description>
									Specifies the minimum column width in pixels for the list items in the UI.
								</description>
								<type>number</type>
								<example>minWidth: 150</example>
							</minWidth>
							<displayName>
								<description>
									Defines a custom display name for the list items, this can be used in combination with dimension placeholders and string manipulation
								</description>
								<type>string</type>
								<example>"displayName": "substring([Period],0,3) [Year]"</example>
							</displayName>
							<total>
								<description>
									Indicates whether a total summary item should be included in the list.
								</description>
								<type>boolean</type>
								<example>total: true</example>
							</total>
						</commonAttributes>
						<rollingPeriods>
							<description>
								Generates a rolling list of periods starting from a specified year and period, spanning a given length, and rolling forward or backward in time.
							</description>
							<attributes>
								<startPeriod>
									<Year>The starting year of the rolling periods.</Year>
									<Period>The starting period (e.g., "p04 - april").</Period>
								</startPeriod>
								<length>The number of periods to include in the list.</length>
								<direction>
									Specifies the direction of the rolling periods:
									<forward>Generates periods rolling forward in time.</forward>
									<backward>Generates periods rolling backward in time.</backward>
								</direction>
							</attributes>
							<example>
								<code>
									{
									"dimensions": ["Year", "Period"],
									"type": "dynamic",
									"dynamicconfig": {
									"relationship": "rolling",
									"startPeriod": { "Year": "2023", "Period": "p01 - january" },
									"length": 12,
									"direction": "backward"
									}
									}
								</code>
							</example>
						</rollingPeriods>
						<descendants>
							<description>
								Generates a dynamic list of all descendant members under a specified parent in a hierarchical dimension.
							</description>
							<attributes>
								<parent>The parent member from which descendants are derived.</parent>
							</attributes>
							<example>
								<code>
									{
									"dimensions": ["Account"],
									"type": "dynamic",
									"dynamicconfig": {
									"relationship": "descendants",
									"parent": "Advertising & Marketing"
									}
									}
								</code>
							</example>
						</descendants>
						<children>
							<description>
								Generates a dynamic list of direct child members under a specified parent in a hierarchical dimension.
							</description>
							<attributes>
								<parent>The parent member whose children are derived.</parent>
							</attributes>
							<example>
								<code>
									{
									"dimensions": ["Entity"],
									"type": "dynamic",
									"dynamicconfig": {
									"relationship": "children",
									"parent": "Region1"
									}
									}
								</code>
							</example>
						</children>
						<generation>
							<description>
								Generates a dynamic list of members based on their generation in a hierarchy, starting with the root as Generation 1.
								Leaf members are considered Generation 0.
							</description>
							<attributes>
								<parent>The top-level parent member (optional, defaults to the root).</parent>
								<depth>The generation depth to include in the list (e.g., 0 for leaf members).</depth>
							</attributes>
							<example>
								<code>
									{
									"dimensions": ["AnalyticalDim2"],
									"type": "dynamic",
									"dynamicconfig": {
									"relationship": "generation",
									"parent": "Top",
									"depth": 2
									}
									}
								</code>
							</example>
						</generation>
						<level>
							<description>
								Generates a dynamic list of members based on their level in a hierarchy, where Level 1 is the root and increases as you move down the hierarchy.
							</description>
							<attributes>
								<parent>The top-level parent member (optional, defaults to the root).</parent>
								<depth>The level depth to include in the list (e.g., 1 for root members).</depth>
							</attributes>
							<example>
								<code>
									{
									"dimensions": ["Department"],
									"type": "dynamic",
									"dynamicconfig": {
									"relationship": "level",
									"parent": "Organization",
									"depth": 3
									}
									}
								</code>
							</example>
						</level>
					</dynamicconfig>
				</dynamicLists>
				<items>
					<description>The second child element contains the items array. Each item in this array represents an individual configuration.</description>
					<eachItemMustInclude>
						<name>A unique identifier typically used within the configuration.</name>
						<displayName>
							This can be a hardcoded string or a dynamic configuration using placeholders like [Account] to automatically reflect labels from the dataset.
							To remove the column header this value should have an empty string "" specified.
						</displayName>
						<dimensionMemberDefinitions>
							<description>
								The dimension member definitions in the items depend on the dimensions set at the list level. These definitions must now be structured under the `dimensions` key.
							</description>
							<example>
								If a list specifies:
								<code>"dimensions": ["Period"]</code>
								Each item must include the Period definition like:
								<code>
									"dimensions": {
									"Period": { "member": "p04 - april" }
									}
								</code>
								If dynamic, it can be set as:
								<code>
									"dimensions": {
									"Period": { "member": "" }
									}
								</code>
							</example>
							<multipleDimensionsExample>
								If the list has multiple dimensions, such as:
								<code>"dimensions": ["Period", "Category", "Year"]</code>
								Each item must include a definition for each dimension under the `dimensions` key:
								<code>
									"dimensions": {
									"Period": { "member": "" },
									"Category": { "member": "Actuals" },
									"Year": { "member": "" }
									}
								</code>
							</multipleDimensionsExample>
							<additionalAttributes>
								Dimension members can now include additional attributes, such as aliases, to control their display or behavior. For example:
								<code>
									"dimensions": {
									"Category": {
									"member": "Actuals",
									"alias": "Actual Results"
									}
									}
								</code>
							</additionalAttributes>
						</dimensionMemberDefinitions>
					</eachItemMustInclude>
					<optionalAttributesForListItems>
						<valuation>Can be "positive" or "negative"—mainly used for Account lists to differentiate income and expense accounts.</valuation>
						<drilldown>
							Drilldown can be used to allow a user to expand and collapse items in a table. This can be done either dynamically or via a drilldown to another list.
							<list>
								This will drill from one member into a new list and will respect formatting.
								<code>"drilldown": "ProductsDrillList"</code>
							</list>
							<children>
								This will create a drill list into the direct children of the specified member.
								<code>"drilldown": "[Account].children"</code>
							</children>
							<descendants>
								This will create a drill list into the direct children of the specified but will also add a drilldown to each child for as long as there are child members available.
								With this option you can basically build a tree that will go all the way till the leaf members.
								You need to specify the dimension.member.relationship. Relationship can be either children (only next level) or descendants (all levels).
								<code>"drilldown": "AnalyticalDim2.[AnalyticalDim2].descendants"</code>
							</descendants>
						</drilldown>
						<format>Specifies predefined formats such as "bold", "skip", "underline", "lineabove", or combinations like "bold_skip_lineabove".</format>
						<attributes>
							<minWidth>The minimum number of pixels the column should be.</minWidth>
							<visible>The default is that a list item is visible. If set to 0, the list item will be hidden but can be used as formula input.</visible>
							<empty>
								When a column or a row has empty=1, no value will be calculated, and the UI will show an empty column or row. This is specifically useful for when using merged column headers to separate blocks of columns.
								Please note that when a column or a row has empty=1, no other attributes, dimension members, or formulas should be specified. Example:
								<code>
									{
									"name": "Q1_VAR_SPACER",
									"attributes": {
									"minWidth": 15,
									"empty": 1
									}
									}
								</code>
							</empty>
						</attributes>
						<formula>
							<type>
								<varianceRelative>Calculates a variance percentage, requires 2 parameters.</varianceRelative>
								<varianceAbsolute>Calculates an absolute variance, requires 2 parameters.</varianceAbsolute>
								<sum>Sums up any number of values defined by the parameters.</sum>
								<ratio>Calculates the percentage of a value over another value, requires 2 parameters.</ratio>
							</type>
							<parameters>Specifies the names of the items required as input.</parameters>
							<displayStyle>
								When empty or left out, normal numbers will be displayed.
								<Bars>Shows a bar in a column indicating the variance.</Bars>
								<TrafficLights>Shows a green or red circle indicating a positive or negative variance.</TrafficLights>
								<Arrows>Shows a green or red arrow indicating a positive or negative variance, with the direction of the arrow indicating movement up or down.</Arrows>
							</displayStyle>
						</formula>
						<numberFormat>
							The number format of a list item overrides the component or report number format for 1 specific item. Example:
							<code>
								"numberFormat": {
								"scale": "millions",
								"decimals": 0
								}
							</code>
						</numberFormat>
						<zeroSuppression>
							This setting can be true or false. If set to true, the row will not be shown if every column is either 0 or empty.
						</zeroSuppression>
					</optionalAttributesForListItems>
				</items>
			</structureOfLists>
		</lists>
	</jsonStructure>
	<guidelines>
		<instructionsForGeneratingModifications>
			1. **Understand the User's Instructions**: Carefully read the user's request to identify the required changes.
			2. **Identify Multiple Actions**: If the user's instructions involve multiple changes, generate separate modification instructions for each action but ensure they are combined into a single response.
			3. **Analyze the Current JSON Configuration**: Examine the provided JSON to determine where the changes need to be applied.
			4. **Determine the Minimal Set of Modifications**: Identify the least number of operations needed to achieve the desired result. Do not split operations into separate responses; keep them unified within a single JSON array.
			5  **Be Mindful of Index Changes**: When removing items from arrays, remember that subsequent items shift their indices. Plan removal operations accordingly to avoid referencing incorrect paths. Removing parent objects when possible can simplify this process. If you for example need to remove the first three items of a list, you can best repeat the removal of item 0 three times.
			6. **Avoid Empty Parent Objects in the layout section**: If multiple child components within the same parent need to be removed, consider removing the entire parent object (such as a column or row) to avoid empty containers and indexing issues. This approach simplifies the modification process.
			7. **Consider the Impact of Each Modification**: Recognize that each operation modifies the JSON structure, potentially affecting subsequent operations. Ensure that the paths in your modification instructions remain valid throughout the sequence of changes.
			8. **Use the Specified Structured Format**: Represent modifications using the specified format, outlining the changes within a single JSON array to avoid multiple output responses.
			9. **Generalize from Examples**: When processing user instructions, identify patterns and similarities with the provided examples, even if the wording differs. Apply similar logic to contextually similar instructions by understanding the reasoning behind each example.
			10. **Mentally Simulate Modifications**: Before finalizing your modification instructions, mentally walk through each operation to ensure all paths remain valid and the desired outcome is achieved without errors.
			11. **Verify changes with metadata**: The user request may contain dimension hierarchies (metadata). Make sure that all modifications you make match this data.
		</instructionsForGeneratingModifications>
		<importantNotes>
			- **Minimal and Unified Changes**: Ensure that the modifications are minimal and only affect parts necessary to implement the user's instructions. Always combine all operations into one unified response.
			- **Validation and Error Prevention**: Verify that the JSON syntax is correct to prevent errors when applying the modifications. Carefully check that your modification instructions will not cause errors when applied, such as invalid paths, out-of-bounds indices, or unintended removal of necessary components. Aim for robust and error-free modifications.
			- **Recognize Synonyms and Handle Ambiguity**: Be aware that users may use different words to express the same intent (e.g., "remove," "delete," "eliminate," "discard"). Treat these terms equivalently when interpreting instructions. If the user's instructions are ambiguous, use context from the JSON configuration and overall structure to infer their intent and choose the most logical modification.
			- **Maintain Consistent Logic Across Tasks**: Apply consistent reasoning and methodologies when handling similar instructions. This ensures predictable and reliable outcomes, improving the assistant's performance over time.
			- **Distinguish report columns from table columns**: The user instructions can mention the word column. This typically means either a column in a table or a column in the report layout, but normally not both. Try to understand what column the user means and then only modify either the list items (in case of table columns) or the report layout
			- **Keep list names relevant to their content**: When changing list items, ensure that the list names are relevant to their content. This helps maintain clarity and reusableity of lists in the JSON configuration.
		</importantNotes>
		<contextualUnderstanding>
			<description>
				**Consider Structural Context**: When interpreting the user's instructions, pay close attention to the structural context within the JSON configuration. Understand how components are related and located in the hierarchy to accurately determine where modifications should be applied.
			</description>
		</contextualUnderstanding>
		<LayoutInstructions>
			**Only 1 component per column** In the layout section. Each column has a components collection, and although it is a collection it should only have 1 component. In case more than 1 component needs to be added consider adding rows or columns
		</LayoutInstructions>
		<ListInstructions>
			**Names in lists have to be unique** Make sure that when adding new list items they all have unqiue names.
			**Rename instructions means change displayName** When a user asks to rename a column in a table, this means that the displayName of the list item should be changed.
		</ListInstructions>
	</guidelines>
	<examples>
		<exampleRemoveChartAndTable>
			<userInstruction>
				Remove the chart and the small table that are next to the main table.
				<similarInstructions>
					Remove the two charts
				</similarInstructions>
			</userInstruction>
			<currentConfig>
				{
				"lists": {
				"products": {
				"dimensions": [ "product" ],
				"items": []
				},
				"periods": {
				"dimensions": [ "period" ],
				"items": []
				},
				"categories": {
				"dimensions": [ "category" ],
				"items": []
				},
				"actbudvariance": {
				"dimensions": [ "category" ],
				"items": []
				},
				"rowDefinitions": {
				"dimensions": [ "account" ],
				"items": []
				},
				"columnDefinitions": {
				"dimensions": [ "period", "category", "year" ],
				"items": []
				},
				"drilldownCols": {
				"dimensions": [ "category" ],
				"items": []
				}
				},
				"layout": {
				"gridColumns": {
				"sm": 1,
				"md": 1,
				"lg": 8
				},
				"rows": [
				{
				"columns": [
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 5
				},
				"components": [
				{
				"type": "ReportTable",
				"config": {
				"rowsList": "rowDefinitions",
				"columnsList": "columnDefinitions",
				"firstColumnWidth": 150,
				"selectRow": true
				}
				}
				]
				},
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 3
				},
				"components": [
				{
				"type": "NestedRow",
				"config": {
				"rows": [
				{
				"columns": [
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 3
				},
				"components": [
				{
				"type": "Chart",
				"title": "Actuals to Budget - [Account]",
				"config": {
				"xAxisList": "periods",
				"yAxisList": "categories",
				"chartType": "Bar",
				"orientation": "Horizontal"
				},
				"height": 300
				}
				]
				}
				]
				},
				{
				"columns": [
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 3
				},
				"components": [
				{
				"type": "ReportTable",
				"title": "Fund Drilldown for [Account]",
				"config": {
				"rowsList": "products",
				"columnsList": "drilldownCols",
				"firstColumnWidth": 100,
				"selectRow": false
				},
				"height": 300
				}
				]
				}
				]
				}
				]
				}
				}
				]
				}
				]
				},
				{
				"columns": [
				{
				"colSpan": {
				"sm": "full",
				"md": "full",
				"lg": "full"
				},
				"components": [
				{
				"type": "ScaleSelectors",
				"noborder": true
				}
				]
				}
				]
				},
				{
				"columns": [
				{
				"colSpan": {
				"sm": "full",
				"md": "full",
				"lg": "full"
				},
				"components": [
				{
				"type": "Comments"
				}
				]
				}
				]
				}
				]
				}
				}
			</currentConfig>
			<reasoning>
				The chart and the table are both in the column 1 of row 0, so we can remove column 1.
				Now there is only 1 column the first column should become full width.
				Since we have removed component(s) we can remove any unused lists. There is only 1 component left that uses the lists rowDefinitions and columnDefinitions so any other list can be removed
			</reasoning>
			<modificationInstructions>
				```json
				{
				"items":
				[
				{
				"op": "remove",
				"path": "/layout/rows/0/columns/1/components/0"
				},
				{
				"op": "replace",
				"path": "/layout/rows/0/columns/0/colSpan",
				"value": {
				"sm": "full",
				"md": "full",
				"lg": "full"
				},
				{
				"op": "remove",
				"path": "/lists/products"
				},
				{
				"op": "remove",
				"path": "/lists/periods"
				},
				{
				"op": "remove",
				"path": "/lists/categories"
				},
				{
				"op": "remove",
				"path": "/lists/actbudvariance"
				},
				{
				"op": "remove",
				"path": "/lists/drilldownCols"
				}
				]
				}
				```
			</modificationInstructions>
		</exampleRemoveChartAndTable>
		<exampleAddDrilldown>
			<userInstruction>
				Add a drilldown to Legal & Professional Services
			</userInstruction>
			<currentConfig>
				```json
				{
				"rowDefinitions": {
				"dimensions": [
				"Account"
				],
				"items": [
				{
				"name": "R4",
				"displayName": "[Account]",
				"drilldown": "Account.[Account].descendants",
				"format": "",
				"dimensions": {
				"Account": {
				"member": "Advertising & Marketing"
				}
				}
				},
				{
				"name": "R5",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": {
				"member": "Legal & Professional Services"
				}
				}
				}
				]
				}
				}
				```
			</currentConfig>
			<reasoning>
				Drilldowns can only be added to rows, so look for lists that are used on rows of tables.
				Look for row items where "account": "Legal & Professional Services" and add the Account.[Account].descendants drilldown attribute.
			</reasoning>
			<modificationInstructions>
				```json
				{
				"items": [
				{
				"op": "add",
				"path": "/rowDefinitions/items/1/drilldown",
				"value": "Account.[Account].descendants"
				}
				]
				}
				```
			</modificationInstructions>
			
		</exampleAddDrilldown>
		<exampleRemoveCategoryFromPOV>
			<userInstruction>
				Remove Category from the POV
			</userInstruction>
			<currentConfig>
				"POV": {
				"category": {
				"default": "Budget",
				"visible": true
				},
				"year": {
				"default": 2023,
				"visible": true
				},
				"period": {
				"default": "p12 - december",
				"visible": true
				},
				"account": {
				"default": "Income",
				"visible": false
				},
				"product": {
				"default": "TotalProduct",
				"visible": false
				}
				}
			</currentConfig>
			<reasoning>
				Never remove a POV element, but when a user asks for removal, set the visible flag to false.
			</reasoning>
			<modificationInstructions>
				```json
				{
				"items":
				[
				{
				"op": "replace",
				"path": "/POV/category/visible",
				"value": false
				}
				]
				}
				```
			</modificationInstructions>
		</exampleRemoveCategoryFromPOV>
		<exampleSetTableColumnWidth>
			<userInstruction>
				Make the table columns 75px
			</userInstruction>
			<currentConfig>
				{
				"TableColumns": {
				"dimensions": [
				"Period"
				],
				"items": [
				{
				"name": "P1",
				"Period": "p01 - january",
				"displayName": "Jan"
				},
				{
				"name": "P2",
				"Period": "p02 - february",
				"displayName": "Feb"
				},
				{
				"name": "P3",
				"Period": "p03 - march",
				"displayName": "Mar"
				}
				]
				}
				}
			</currentConfig>
			<reasoning>
				We should add the attrubutes element and add minWidth the minWidth attribute
			</reasoning>
			<modificationInstructions>
				```json
				{
				"modifications": [
				{
				"op": "add",
				"path": "/lists/MonthlyValuesAndTotal/items/0/attributes",
				"value": {
				"minWidth": 75
				}
				},
				{
				"op": "add",
				"path": "/lists/MonthlyValuesAndTotal/items/1/attributes",
				"value": {
				"minWidth": 75
				}
				},
				{
				"op": "add",
				"path": "/lists/MonthlyValuesAndTotal/items/2/attributes",
				"value": {
				"minWidth": 75
				}
				}
				]
				}
				```
			</modificationInstructions>
		</exampleSetTableColumnWidth>
		<exampleAddVarianceChart>
			<userInstruction>
				Add a variance chart comparing Actuals to Budget
			</userInstruction>
			<currentConfig>
				"layout": {
				"gridColumns": {
				"sm": 1,
				"md": 1,
				"lg": 8
				},
				"rows": [
				{
				"columns": [
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 5
				},
				"components": [
				{
				"id": "C1",
				"type": "ReportTable",
				"config": {
				"firstColumnWidth": 250,
				"lists": [
				{
				"listReference": "rowsList",
				"list": "ProfitAndLossAccounts"
				},
				{
				"listReference": "columnsList",
				"list": "ActualsBudgetVariance%VarianceBar"
				}
				]
				}
				}
				]
				},
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 3
				},
				"components": [
				{
				"id": "N1",
				"type": "NestedRow",
				"config": {
				"rows": [
				{
				"columns": [
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 3
				},
				"components": [
				{
				"id": "C2",
				"type": "Chart",
				"title": "Actuals to Budget - [Account]",
				"maxheight": 300,
				"config": {
				"KPI": { "View": "Periodic" },
				"chartType": "Bar",
				"orientation": "Horizontal",
				"lists": [
				{
				"listReference": "xAxisList",
				"list": "12periods"
				},
				{
				"listReference": "yAxisList",
				"list": "ActualsBudget"
				}
				]
				}
				}
				]
				}
				]
				}
				]
				}
				}
				]
				}
				]
				},
				{
				"columns": [
				{
				"colSpan": {
				"sm": "full",
				"md": "full",
				"lg": "full"
				},
				"components": [
				{
				"id": "S1",
				"type": "ScaleSelectors",
				"noborder": true
				}
				]
				}
				]
				},
				{
				"columns": [
				{
				"colSpan": {
				"sm": "full",
				"md": "full",
				"lg": "full"
				},
				"components": [
				{
				"id": "Co1",
				"type": "Comments"
				}
				]
				}
				]
				}
				]
				}
			</currentConfig>
			<reasoning>
				There is currently a chart in the nested row that is only 300px high. Most logical will be to add this new chart below this chart as a new row in the same column
				As for the lists, the configuration has suitable lists. The yAxisList expects two members like Actual and Budget which is the ActualsBudget. The xAxisList expects a time series and it is only logical to take the same time series as the first chart
			</reasoning>
			<modificationInstructions>
				```json
				{
				"items": [
				{
				"op": "add",
				"path": "/layout/rows/0/columns/1/components/0/config/rows/1",
				"value": {
				"columns": [
				{
				"colSpan": {
				"sm": 1,
				"md": 1,
				"lg": 3
				},
				"components": [
				{
				"id": "C3",
				"type": "Chart",
				"title": "Actuals Budget Variance - [Account]",
				"maxheight": 300,
				"config": {
				"KPI": {
				"View": "Periodic"
				},
				"chartType": "VarianceBar",
				"orientation": "Horizontal",
				"lists": [
				{
				"listReference": "xAxisList",
				"list": "12periods"
				},
				{
				"listReference": "yAxisList",
				"list": "ActualsBudget"
				}
				]
				}
				}
				]
				}
				]
				}
				}
				]
				}				```
			</modificationInstructions>
		</exampleAddVarianceChart>
		<exampleRemoveRowsFromTable>
			<userInstruction>
				Remove the first 3 rows from the table
			</userInstruction>
			<currentConfig>
				```json
				{
				"TableRows": {
				"dimensions": [
				"Account"
				],
				"items": [
				{
				"name": "R1",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": {
				"member": "Operating Sales"
				}
				}
				},
				{
				"name": "R2",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": {
				"member": "IC Sales"
				}
				}
				},
				{
				"name": "R3",
				"displayName": "[Account]",
				"format": "underline",
				"dimensions": {
				"Account": {
				"member": "Returns & Allowances"
				}
				}
				},
				{
				"name": "R4",
				"displayName": "[Account]",
				"format": "bold_skip",
				"dimensions": {
				"Account": {
				"member": "Net Sales"
				}
				}
				}
				]
				}
				}
				```
			</currentConfig>
			<reasoning>
				When removing from a list, be aware of index changes. To remove the first three rows, you will need to remove the first element three times.
			</reasoning>
			<modificationInstructions>
				```json
				{
				"items": [
				{
				"op": "remove",
				"path": "/lists/TableRows/items/0"
				},
				{
				"op": "remove",
				"path": "/lists/TableRows/items/0"
				},
				{
				"op": "remove",
				"path": "/lists/TableRows/items/0"
				}
				]
				}
				```
			</modificationInstructions>
		</exampleRemoveRowsFromTable>
		<exampleAddNewBlockToMergedHeaders>
			<userInstruction>
				Add an empty column and then repeat the 2011 block for 2010
			</userInstruction>
			<currentConfig>
				```json
				{
				"Component": {
				"components": [
				{
				"id": "C1",
				"type": "ReportTable",
				"config": {
				"firstColumnWidth": 150,
				"selectRow": true,
				"lists": [
				{
				"listReference": "rowsList",
				"list": "ImportantKPIs",
				"createDescription": "Create a list for the most important KPIs (including drilldowns) formatted as a short P&L statement."
				},
				{
				"listReference": "columnsList",
				"list": "ActualsBudgetVariance",
				"createDescription": "Create a list comparing Actuals to Budget with a variance and a traffic light"
				}
				],
				"mergeColumnHeaders": true
				}
				}
				]
				},
				"ActualsBudgetVariance": {
				"dimensions": [
				"Year",
				"Category"
				],
				"items": [
				{
				"name": "Actual",
				"displayName": "Actual",
				"dimensions": {
				"Year": { "member": "2011" },
				"Category": { "member": "Actual" }
				}
				},
				{
				"name": "Budget",
				"displayName": "Budget",
				"dimensions": {
				"Year": { "member": "2011" },
				"Category": { "member": "Budget" }
				}
				},
				{
				"name": "Variance",
				"displayName": "Variance",
				"formula": {
				"type": "varianceAbsolute",
				"parameters": [
				"Actual",
				"Budget"
				]
				},
				"dimensions": {
				"Year": { "member": "2011" },
				"Category": { "member": "Variance" }
				}
				},
				{
				"name": "TrafficLight",
				"displayName": "Δ",
				"formula": {
				"type": "varianceRelative",
				"parameters": [
				"YActual",
				"Budget"
				],
				"displayStyle": "TrafficLights"
				},
				"dimensions": {
				"Year": { "member": "2011" },
				"Category": { "member": "Δ" }
				}
				}
				]
				}
				}
				```
			</currentConfig>
			<reasoning>
				The user is asking for a new block of columns and is using merged headers. This means that the new block should be added to the merged headers. The new block should be a copy of the 2011 block for 2010. This means that the new block should have the same items as the 2011 block but with the year changed to 2010.
				Also, the list name is no longer describing the content, so it should be renamed to ActualsBudgetVariance2011and2010.
			</reasoning>
			<modificationInstructions>
				```json
				{
				"items": [
				{
				"op": "add",
				"path": "/lists/ActualsBudgetVariance/items/4",
				"value": {
				"name": "Empty",
				"Category": "",
				"Year": "",
				"displayName": "",
				"attributes": {
				"minWidth": 15,
				"empty": 1
				}
				}
				},
				{
				"op": "add",
				"path": "/lists/ActualsBudgetVariance/items/5",
				"value": {
				"name": "Actual2010",
				"Category": "Actual",
				"Year": "2010",
				"displayName": "Actual",
				"dimensions": {
				"Year": { "member": "2010" },
				"Category": { "member": "Actual" }
				}
				}
				},
				{
				"op": "add",
				"path": "/lists/ActualsBudgetVariance/items/6",
				"value": {
				"name": "Budget2010",
				"Category": "Budget",
				"Year": "2010",
				"displayName": "Budget",
				"dimensions": {
				"Year": { "member": "2010" },
				"Category": { "member": "Budget" }
				}
				}
				},
				{
				"op": "add",
				"path": "/lists/ActualsBudgetVariance/items/7",
				"value": {
				"name": "Variance2010",
				"Category": "Variance",
				"Year": "2010",
				"displayName": "Variance",
				"formula": {
				"type": "varianceAbsolute",
				"parameters": [
				"Actual2010",
				"Budget2010"
				]
				},
				"dimensions": {
				"Year": { "member": "2010" },
				"Category": { "member": "Variance" }
				}
				}
				},
				{
				"op": "add",
				"path": "/lists/ActualsBudgetVariance/items/8",
				"value": {
				"name": "TrafficLight2010",
				"Category": "Δ",
				"Year": "2010",
				"displayName": "Δ",
				"formula": {
				"type": "varianceRelative",
				"parameters": [
				"Actual2010",
				"Budget2010"
				],
				"displayStyle": "TrafficLights"
				},
				"dimensions": {
				"Year": { "member": "2010" },
				"Category": { "member": "Δ" }
				}
				}
				},
				{
				"op": "move",
				"from": "/lists/ActualsBudgetVariance",
				"path": "/lists/ActualsBudgetVariance2011and2010"
				},
				{
				"op": "replace",
				"path": "/layout/rows/1/columns/0/components/0/config/lists/1/list",
				"value": "ActualsBudgetVariance2011and2010"
				}
				]
				}
				```
			</modificationInstructions>
		</exampleAddNewBlockToMergedHeaders>
		<exampleAddRowToTable>
			<userInstruction>
				Add "Contribution Margin" to the rows with bold line above and skip
			</userInstruction>
			<currentConfig>
				```json
				{
				"lists": {
				"ProfitAndLossAccounts": {
				"dimensions": ["Account"],
				"items": [
				{
				"name": "R1",
				"displayName": "[Account]",
				"format": "",
				"drilldown": "Account.[Account].descendants",
				"dimensions": {
				"Account": { "member": "Operating Sales" }
				}
				},
				{
				"name": "R2",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": { "member": "IC Sales" }
				}
				},
				{
				"name": "R3",
				"displayName": "[Account]",
				"format": "bold_lineabove_skip",
				"dimensions": {
				"Account": { "member": "Returns & Allowances" }
				}
				},
				{
				"name": "R4",
				"displayName": "[Account]",
				"format": "bold_skip_lineabove",
				"dimensions": {
				"Account": { "member": "Product Margin" }
				}
				},
				{
				"name": "R5",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": { "member": "Delivery expenses - Fulfillment Cost" }
				}
				},
				{
				"name": "R6",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": { "member": "Charges on Credit Card Sales" }
				}
				},
				{
				"name": "R7",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": { "member": "Aggregator Fees" }
				}
				},
				{
				"name": "R8",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": { "member": "Another KPI" }
				}
				},
				{
				"name": "R9",
				"displayName": "[Account]",
				"format": "",
				"dimensions": {
				"Account": { "member": "Yet Another KPI" }
				}
				}
				]
				}
				}
				}
				```
			</currentConfig>
			<reasoning>
				The user is asking for a new row to be added to the `ProfitAndLossAccounts` list. Specifically, they want to add "Contribution Margin" with a bold line above and skip formatting. Since there are currently 9 rows, the new row will be the 10th item (index 9). The new row should follow the existing structure, ensuring that the `Account` dimension is properly nested and formatted.
			</reasoning>
			<modificationInstructions>
				```json
				{
				"items": [
				{
				"op": "add",
				"path": "/lists/ProfitAndLossAccounts/items/",
				"value": {
				"name": "R10",
				"displayName": "[Account]",
				"format": "bold_lineabove_skip",
				"dimensions": {
				"Account": { "member": "Contribution Margin" }
				}
				}
				}
				]
				}
				```
			</modificationInstructions>
		</exampleAddRowToTable>

	</examples>
</task>
